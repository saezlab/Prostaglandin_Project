# Fixing GNG12 & GNB3
allD[which(allD[, 2]=="GNG12"), 2] <- "GBG"
allD[which(allD[, 4]=="GNG12"), 4] <- "GBG"
allD[which(allD[, 8]=="GNG12_R1"), 8] <- "GBG_R1"
allD[which(allD[, 2]=="GNB1"), 2] <- "GBG"
allD[which(allD[, 4]=="GNB1"), 4] <- "GBG"
allD[which(allD[, 2]=="GNB2"), 2] <- "GBG"
allD[which(allD[, 4]=="GNB2"), 4] <- "GBG"
allD[which(allD[, 2]=="GNB3"), 2] <- "GBG"
allD[which(allD[, 4]=="GNB3"), 4] <- "GBG"
allD[which(allD[, 8]=="GNB1_R1"), 8] <- "GBG_R1"
allD[which(allD[, 8]=="GNB2_R1"), 8] <- "GBG_R1"
allD[which(allD[, 8]=="GNB3_R1"), 8] <- "GBG_R1"
allD <- unique(allD)
# allD[, 7] <- paste0("e", 1:nrow(allD))
allD <- as.data.frame(x = allD)
allD$S.AC <- as.character(allD$S.AC)
allD$S.ID <- as.character(allD$S.ID)
allD$K.AC <- as.character(allD$K.AC)
allD$K.ID <- as.character(allD$K.ID)
allD$res <- as.character(allD$res)
allD$pos <- as.character(allD$pos)
allD$SID <- as.character(allD$SID)
allD$S.cc <- as.character(allD$S.cc)
idx <- which(allD$S.ID%in%c("PTGER1", "PTGER2", "PTGER3", "PTGER4"))
allD <- allD[-idx, ]
##
# Grouping
# cPRKC
toReplace <- c("PRKCA", "PRKCB", "PRKCG")
idx1 <- which(allD$K.ID%in%toReplace)
idx2 <- which(allD$S.ID%in%toReplace)
allD$K.ID[idx1] <- "cPRKC"
allD$K.AC[idx1] <- "cPRKC"
allD$S.ID[idx2] <- "cPRKC"
allD$S.AC[idx2] <- "cPRKC"
for(ii in 1:length(idx2)){
allD$S.cc[idx2[ii]] <- paste0("cPRKC", "_", strsplit(x = allD$S.cc[idx2[ii]], split = "_", fixed = TRUE)[[1]][2])
}
# nPRKC
toReplace <- c("PRKCD", "PRKCE", "PRKCH", "PRKCQ")
idx1 <- which(allD$K.ID%in%toReplace)
idx2 <- which(allD$S.ID%in%toReplace)
allD$K.ID[idx1] <- "nPRKC"
allD$K.AC[idx1] <- "nPRKC"
allD$S.ID[idx2] <- "nPRKC"
allD$S.AC[idx2] <- "nPRKC"
for(ii in 1:length(idx2)){
allD$S.cc[idx2[ii]] <- paste0("nPRKC", "_", strsplit(x = allD$S.cc[idx2[ii]], split = "_", fixed = TRUE)[[1]][2])
}
# aPRKC
toReplace <- c("PRKCZ", "PRKCI")
idx1 <- which(allD$K.ID%in%toReplace)
idx2 <- which(allD$S.ID%in%toReplace)
allD$K.ID[idx1] <- "aPRKC"
allD$K.AC[idx1] <- "aPRKC"
allD$S.ID[idx2] <- "aPRKC"
allD$S.AC[idx2] <- "aPRKC"
for(ii in 1:length(idx2)){
allD$S.cc[idx2[ii]] <- paste0("aPRKC", "_", strsplit(x = allD$S.cc[idx2[ii]], split = "_", fixed = TRUE)[[1]][2])
}
# PI3K
toReplace <- c("PIK3CA", "PIK3R1")
idx1 <- which(allD$K.ID%in%toReplace)
idx2 <- which(allD$S.ID%in%toReplace)
allD$K.ID[idx1] <- "PI3K"
allD$K.AC[idx1] <- "PI3K"
allD$S.ID[idx2] <- "PI3K"
allD$S.AC[idx2] <- "PI3K"
for(ii in 1:length(idx2)){
allD$S.cc[idx2[ii]] <- paste0("PI3K", "_", strsplit(x = allD$S.cc[idx2[ii]], split = "_", fixed = TRUE)[[1]][2])
}
# MAP3K1
toReplace <- c("MEKK1", "MAPKKK1", "MEKK")
idx1 <- which(allD$K.ID%in%toReplace)
idx2 <- which(allD$S.ID%in%toReplace)
allD$K.ID[idx1] <- "MAP3K1"
allD$K.AC[idx1] <- "MAP3K1"
allD$S.ID[idx2] <- "MAP3K1"
allD$S.AC[idx2] <- "MAP3K1"
for(ii in 1:length(idx2)){
allD$S.cc[idx2[ii]] <- paste0("MAP3K1", "_", strsplit(x = allD$S.cc[idx2[ii]], split = "_", fixed = TRUE)[[1]][2])
}
# MAP2K1
toReplace <- c("MEK1", "PRKMK1")
idx1 <- which(allD$K.ID%in%toReplace)
idx2 <- which(allD$S.ID%in%toReplace)
allD$S.ID[idx2] <- "MAP2K1"
allD$S.AC[idx2] <- "MAP2K1"
for(ii in 1:length(idx2)){
allD$S.cc[idx2[ii]] <- paste0("MAP2K1", "_", strsplit(x = allD$S.cc[idx2[ii]], split = "_", fixed = TRUE)[[1]][2])
}
# MAP2K4
toReplace <- c("MEK4", "PRKMK1")
idx1 <- which(allD$K.ID%in%toReplace)
idx2 <- which(allD$S.ID%in%toReplace)
allD$K.ID[idx1] <- "MAP2K4"
allD$K.AC[idx1] <- "MAP2K4"
allD$S.ID[idx2] <- "MAP2K4"
allD$S.AC[idx2] <- "MAP2K4"
for(ii in 1:length(idx2)){
allD$S.cc[idx2[ii]] <- paste0("MAP2K4", "_", strsplit(x = allD$S.cc[idx2[ii]], split = "_", fixed = TRUE)[[1]][2])
}
# CAMKii
toReplace <- c("CAMK2A", "CAMK2B", "CAMK2C", "CAMK2D", "CAMK2G", paste0("CAMK", 1:4), paste0("CAMKK", 1:2))
idx1 <- which(allD$K.ID%in%toReplace)
idx2 <- which(allD$S.ID%in%toReplace)
allD$K.ID[idx1] <- "CAMKii"
allD$K.AC[idx1] <- "CAMKii"
allD$S.ID[idx2] <- "CAMKii"
allD$S.AC[idx2] <- "CAMKii"
for(ii in 1:length(idx2)){
allD$S.cc[idx2[ii]] <- paste0("CAMKii", "_", strsplit(x = allD$S.cc[idx2[ii]], split = "_", fixed = TRUE)[[1]][2])
}
##
# Fix ARRB residues
toReplace <- c("ARRB1", "ARRB2")
idx <- which(allD$S.ID%in%toReplace)
allD$S.ID[idx] <- "ARRB"
allD$S.AC[idx] <- "ARRB"
for(ii in 1:length(idx)){
allD$S.cc[idx[ii]] <- paste0("ARRB_", strsplit(x = allD$S.cc[idx[ii]], split = "_", fixed = TRUE)[[1]][2])
}
idx = which(allD$K.ID%in%toReplace)
allD$K.AC[idx] = "ARRB"
allD$K.ID[idx] = "ARRB"
##
# Fix GRK's
toReplace <- paste0("GRK", 1:7)
idx <- which(allD$K.ID%in%toReplace)
allD$K.ID[idx] <- "GRK"
idx <- which(allD$S.ID%in%toReplace)
allD$S.ID[idx] <- "GRK"
for(ii in 1:length(idx)){
allD$S.cc[idx[ii]] <- paste0("GRK_", strsplit(x = allD$S.cc[idx[ii]], split = "_", fixed = TRUE)[[1]][2])
}
##
# Fix GNAI's
idx <- which(grepl(pattern = "GNAI", x = allD$S.ID))
allD$S.ID[idx] = "GNAI"
idx <- which(grepl(pattern = "GNAI", x = allD$K.ID))
allD$K.ID[idx] = "GNAI"
idx <- which(grepl(pattern = "GNAI", x = allD$S.cc))
allD$S.cc[idx] = "GNAI_R1"
idx2rem = which(duplicated(allD[, c(4, 8)]))
allD = allD[-idx2rem, ]
connection = t(as.matrix(c("PRKACA", "PRKACA", "GNAI", "GNAI", "R", "1", NA, "PRKACA_R1")))
colnames(connection) = colnames(allD)
connection = as.data.frame(connection)
allD = unique(rbind(allD, connection))
##
# remove GNAS -> PI3K
idx1 <- which(allD$K.ID=="GNAS")
idx2 <- which(allD$S.ID=="PI3K")
idx <- intersect(x = idx1, y = idx2)
allD <- allD[-idx, ]
# remove ARRB -> EGFR
idx1 <- which(allD$K.ID=="ARRB")
idx2 <- which(allD$S.ID=="EGFR")
idx <- intersect(x = idx1, y = idx2)
allD <- allD[-idx, ]
allD$SID = paste0("e", 1:nrow(allD))
idx1 = which(x = grepl(pattern = "GNAI", x = allD$S.AC, fixed = TRUE))
allD$S.AC[idx1] = "GNAI"
allD$S.ID[idx1] = "GNAI"
idx2 = which(x = grepl(pattern = "GNAI", x = allD$K.AC, fixed = TRUE))
allD$K.AC[idx2] = "GNAI"
allD$K.ID[idx2] = "GNAI"
# remove redundant GNAS
idx1 = which(x = grepl(pattern = "GNAS", x = allD$S.AC))
idx2 = which(x = grepl(pattern = "PTGER", x = allD$K.AC))
idx = intersect(x = idx1, y = idx2)
allD = allD[-setdiff(x = idx1, y = idx), ]
# remove redundant GNAQ
idx1 = which(x = grepl(pattern = "GNAQ", x = allD$S.AC))
idx2 = which(x = grepl(pattern = "PTGER", x = allD$K.AC))
idx = intersect(x = idx1, y = idx2)
allD = allD[-setdiff(x = idx1, y = idx), ]
# remove redundant GNAI
idx1 = which(x = grepl(pattern = "GNAI", x = allD$S.AC))
idx2 = which(x = grepl(pattern = "PTGER", x = allD$K.AC))
idx = intersect(x = idx1, y = idx2)
allD = allD[-setdiff(x = idx1, y = idx), ]
# remove redundant GNA12
idx1 = which(x = grepl(pattern = "GNA12", x = allD$S.AC))
idx2 = which(x = grepl(pattern = "PTGER", x = allD$K.AC))
idx = intersect(x = idx1, y = idx2)
allD = allD[-setdiff(x = idx1, y = idx), ]
# Now grouping all the AKT's
allD$S.AC[which(allD$S.AC%in%paste0("AKT", 1:3))] = "AKT"
allD$S.ID[which(allD$S.ID%in%paste0("AKT", 1:3))] = "AKT"
allD$K.AC[which(allD$K.AC%in%paste0("AKT", 1:3))] = "AKT"
allD$K.ID[which(allD$K.ID%in%paste0("AKT", 1:3))] = "AKT"
for(ii in 1:nrow(allD)){
pp = strsplit(x = allD$S.cc[ii], split = "_", fixed = TRUE)[[1]][1]
ss = strsplit(x = allD$S.cc[ii], split = "_", fixed = TRUE)[[1]][2]
if(pp%in%paste0("AKT", 1:3)){
allD$S.cc[ii] = paste0("AKT_", ss)
}
}
allD$SID = "e1"
allD = unique(allD)
allD$SID = paste0("e", 1:nrow(allD))
save(allD, file = "allD.RData")
rm(list = ls())
getwd()
setwd("/Users/enio.gjerga/Documents/GitHub/Prostaglandin_Project/PHONEMeS-Analysis/")
setwd("/Users/enio.gjerga/Documents/GitHub/Prostaglandin_Project/PHONEMeS-Analysis/CD4/")
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
source("../Public/buildDataMatrix.R")
source("../Public/ilpFunctions.R")
source("../Public/buildDataObject.R")
source("../Public/build_Nw.R")
source("../Public/build_PKN.R")
load(file = "../../Background-Network/allD.RData")
load(file = "../../PHONEMeS-Inputs/dataGMM_CD4.RData")
GMM.ID$S.cc <- GMM.ID$dataID
GMM.res.noFC <- GMM
GMM.res <- GMM.wFC
GMM.res.ID <- GMM.ID
rm(list = ls())
getwd()
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../Public/buildDataMatrix.R")
source("../Public/ilpFunctions.R")
source("../Public/buildDataObject.R")
source("../Public/build_Nw.R")
source("../Public/build_PKN.R")
load(file = "../../Background-Network/allD.RData")
load(file = "../../PHONEMeS-Inputs/dataGMM_CD4.RData")
GMM.ID$S.cc <- GMM.ID$dataID
GMM.res.noFC <- GMM
GMM.res <- GMM.wFC
GMM.res.ID <- GMM.ID
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list()
for(i in 1:nrow(GMM[[1]])){
conditions[[length(conditions)+1]] <- rownames(GMM[[1]])[i]
}
names(conditions) <- rownames(GMM[[i]])
targets.P<-list(cond1=c("PTGER1"), cond2=c("PTGER2"), cond3=c("PTGER3"), cond4=c("PTGER4"),
cond5=c("PTGER1", "PTGER2", "PTGER3", "PTGER4"))
targets <- targets.P
sifAll <- matrix(data = , nrow = 1, ncol = 3)
colnames(sifAll) <- c("Source", "f50", "Target")
for(ii in 1:6){
if(ii %in% 1:5){
experiments=ii
source("../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "all", timelimit = 3600, case = ii)
resultsMulti <- removeRedundantNodes(resultsSIF1 = resultsMulti)
sifAll <- unique(rbind(sifAll, as.matrix(resultsMulti)))
#Assigning attributes for better visualization
source("../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = sifAll[-1, ], dataGMM = dataGMM, targets = targets.P)
} else {
experiments=1:5
source("../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "all", timelimit = 3600, case = 5)
resultsMulti <- removeRedundantNodes(resultsSIF1 = resultsMulti)
write.table(x = resultsMulti, file = paste0("../../Results/PHONEMeS/CD4/cplex_exp_combined.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
sifAll <- unique(rbind(sifAll, as.matrix(resultsMulti)))
#Assigning attributes for better visualization
source("../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = sifAll[-1, ], dataGMM = dataGMM, targets = targets.P)
write.table(x = nodesAttributes, file = paste0("../../Results/PHONEMeS/CD4/nodesAttributes_combined.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
}
}
rm(list = ls())
getwd()
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../Public/buildDataMatrix.R")
source("../Public/ilpFunctions.R")
source("../Public/buildDataObject.R")
source("../Public/build_Nw.R")
source("../Public/build_PKN.R")
load(file = "../../Background-Network/allD.RData")
load(file = "../../PHONEMeS-Inputs/dataGMM_CD4.RData")
GMM.ID$S.cc <- GMM.ID$dataID
GMM.res.noFC <- GMM
GMM.res <- GMM.wFC
GMM.res.ID <- GMM.ID
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list()
for(i in 1:nrow(GMM[[1]])){
conditions[[length(conditions)+1]] <- rownames(GMM[[1]])[i]
}
names(conditions) <- rownames(GMM[[i]])
targets.P<-list(cond1=c("PTGER1"), cond2=c("PTGER2"), cond3=c("PTGER3"), cond4=c("PTGER4"),
cond5=c("PTGER1", "PTGER2", "PTGER3", "PTGER4"))
targets <- targets.P
sifAll <- matrix(data = , nrow = 1, ncol = 3)
colnames(sifAll) <- c("Source", "f50", "Target")
for(ii in 1:6){
if(ii %in% 1:5){
experiments=ii
source("../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "all", timelimit = 3600, case = ii)
resultsMulti <- removeRedundantNodes(resultsSIF1 = resultsMulti)
write.table(x = resultsMulti, file = paste0("CD4_cplex_exp", ii, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
sifAll <- unique(rbind(sifAll, as.matrix(resultsMulti)))
#Assigning attributes for better visualization
source("../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = sifAll[-1, ], dataGMM = dataGMM, targets = targets.P)
write.table(x = nodesAttributes, file = paste0("nodesAttributes_", ii, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
} else {
experiments=1:5
source("../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "all", timelimit = 3600, case = 5)
resultsMulti <- removeRedundantNodes(resultsSIF1 = resultsMulti)
write.table(x = resultsMulti, file = paste0("cplex_exp_combined.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
sifAll <- unique(rbind(sifAll, as.matrix(resultsMulti)))
#Assigning attributes for better visualization
source("../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = sifAll[-1, ], dataGMM = dataGMM, targets = targets.P)
write.table(x = nodesAttributes, file = paste0("nodesAttributes_combined.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
}
}
groupNodes = function(sif = sif, nodesAttributes = nodesAttributes, sifName = "sif_grouped.txt", attribName = "attrib_grouped.txt"){
idx = c()
for(ii in 1:nrow(nodesAttributes)){
if(is.na(nodesAttributes[ii, 2])){
if(length(strsplit(x = as.character(nodesAttributes[ii, 1]), split = "_")[[1]]) > 1){
idx = c(idx, ii)
}
}
}
species = nodesAttributes$Species[idx]
speciesProt = c()
residues = c()
mapping = matrix(data = , nrow = length(species), ncol = 2)
mapping[, 1] = species
for(ii in 1:length(species)){
speciesProt = c(speciesProt, strsplit(x = species[ii], split = "_")[[1]][1])
residues = c(residues, strsplit(x = species[ii], split = "_")[[1]][2])
}
uSpeciesProt = unique(speciesProt)
sites = matrix(data = , nrow = length(uSpeciesProt), ncol = 2)
sites[, 1] = uSpeciesProt
for(ii in 1:nrow(sites)){
idx = which(speciesProt==sites[ii, 1])
sites[ii, 2] = paste0(sites[ii, 1], "_")
for(jj in 1:length(idx)){
sites[ii, 2] = paste0(sites[ii, 2], residues[idx[jj]], ";")
}
sites[ii, 2] = substr(sites[ii, 2], 1, nchar(sites[ii, 2])-1)
mapping[idx, 2] = sites[ii, 2]
}
for(ii in 1:nrow(nodesAttributes)){
if(as.character(nodesAttributes[ii, 1])%in%mapping[, 1]){
idx = which(mapping[, 1]==as.character(nodesAttributes[ii, 1]))
nodesAttributes[ii, 1] = mapping[idx, 2]
}
}
nodesAttributes = unique(nodesAttributes)
write.table(x = nodesAttributes, file = attribName, quote = FALSE, sep = "\t", row.names = FALSE)
#
for(ii in 1:nrow(sif)){
idx = which(mapping[, 1]==as.character(sif[ii, 1]))
if(length(idx)>0){
sif[ii, 1] = mapping[idx, 2]
}
idx = which(mapping[, 1]==as.character(sif[ii, 3]))
if(length(idx)>0){
sif[ii, 3] = mapping[idx, 2]
}
}
for(ii in 1:nrow(sif)){
ss = as.character(sif[ii, 1])
tt = as.character(sif[ii, 3])
idx1 = which(sif$Source==ss)
idx2 = which(sif$Target==tt)
idx = intersect(x = idx1, y = idx2)
sif$f50[idx] = as.character(mean(as.numeric(sif$f50[idx])))
}
sif = unique(sif)
idx2rem = c()
for(ii in 1:nrow(sif)){
if(length(strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]])>1){
ss1 = strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]][1]
ss2 = strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]][2]
if(ss1==ss2){idx2rem=c(idx2rem, ii)}
}
if(length(strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]])>1){
ss1 = strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]][1]
ss2 = strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]][2]
if(ss1==ss2){idx2rem=c(idx2rem, ii)}
}
}
write.table(x = sif, file = sifName, quote = FALSE, sep = "\t", row.names = FALSE)
}
##
library(readr)
for(ii in 1:5){
sif1 = read_delim(paste0("CD4_cplex_exp", ii, ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
nodesAttributes = read_delim(paste0("nodesAttributes_", ii, ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
file.remove(paste0("CD4_cplex_exp", ii, ".txt"))
file.remove(paste0("nodesAttributes_", ii, ".txt"))
groupNodes(sif = sif1, nodesAttributes = nodesAttributes, sifName = paste0("../../Results/PHONEMeS/CD4/cplex_grouped_", ii, ".txt"),
attribName = paste0("../../Results/PHONEMeS/CD4/attributes_grouped_cplex_", ii, ".txt"))
}
sif1 = read_delim(paste0("CD4_cplex_exp_combined.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
nodesAttributes = read_delim(paste0("nodesAttributes_combined.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
groupNodes(sif = sif1, nodesAttributes = nodesAttributes, sifName = paste0("../../Results/PHONEMeS/CD4/cplex_grouped_combined.txt"),
attribName = paste0("../../Results/PHONEMeS/CD4/attributes_grouped_cplex_combined.txt"))
groupNodes = function(sif = sif, nodesAttributes = nodesAttributes, sifName = "sif_grouped.txt", attribName = "attrib_grouped.txt"){
idx = c()
for(ii in 1:nrow(nodesAttributes)){
if(is.na(nodesAttributes[ii, 2])){
if(length(strsplit(x = as.character(nodesAttributes[ii, 1]), split = "_")[[1]]) > 1){
idx = c(idx, ii)
}
}
}
species = nodesAttributes$Species[idx]
speciesProt = c()
residues = c()
mapping = matrix(data = , nrow = length(species), ncol = 2)
mapping[, 1] = species
for(ii in 1:length(species)){
speciesProt = c(speciesProt, strsplit(x = species[ii], split = "_")[[1]][1])
residues = c(residues, strsplit(x = species[ii], split = "_")[[1]][2])
}
uSpeciesProt = unique(speciesProt)
sites = matrix(data = , nrow = length(uSpeciesProt), ncol = 2)
sites[, 1] = uSpeciesProt
for(ii in 1:nrow(sites)){
idx = which(speciesProt==sites[ii, 1])
sites[ii, 2] = paste0(sites[ii, 1], "_")
for(jj in 1:length(idx)){
sites[ii, 2] = paste0(sites[ii, 2], residues[idx[jj]], ";")
}
sites[ii, 2] = substr(sites[ii, 2], 1, nchar(sites[ii, 2])-1)
mapping[idx, 2] = sites[ii, 2]
}
for(ii in 1:nrow(nodesAttributes)){
if(as.character(nodesAttributes[ii, 1])%in%mapping[, 1]){
idx = which(mapping[, 1]==as.character(nodesAttributes[ii, 1]))
nodesAttributes[ii, 1] = mapping[idx, 2]
}
}
nodesAttributes = unique(nodesAttributes)
write.table(x = nodesAttributes, file = attribName, quote = FALSE, sep = "\t", row.names = FALSE)
#
for(ii in 1:nrow(sif)){
idx = which(mapping[, 1]==as.character(sif[ii, 1]))
if(length(idx)>0){
sif[ii, 1] = mapping[idx, 2]
}
idx = which(mapping[, 1]==as.character(sif[ii, 3]))
if(length(idx)>0){
sif[ii, 3] = mapping[idx, 2]
}
}
for(ii in 1:nrow(sif)){
ss = as.character(sif[ii, 1])
tt = as.character(sif[ii, 3])
idx1 = which(sif$Source==ss)
idx2 = which(sif$Target==tt)
idx = intersect(x = idx1, y = idx2)
sif$f50[idx] = as.character(mean(as.numeric(sif$f50[idx])))
}
sif = unique(sif)
idx2rem = c()
for(ii in 1:nrow(sif)){
if(length(strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]])>1){
ss1 = strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]][1]
ss2 = strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]][2]
if(ss1==ss2){idx2rem=c(idx2rem, ii)}
}
if(length(strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]])>1){
ss1 = strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]][1]
ss2 = strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]][2]
if(ss1==ss2){idx2rem=c(idx2rem, ii)}
}
}
write.table(x = sif, file = sifName, quote = FALSE, sep = "\t", row.names = FALSE)
}
##
library(readr)
for(ii in 1:5){
sif1 = read_delim(paste0("CD4_cplex_exp", ii, ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
nodesAttributes = read_delim(paste0("nodesAttributes_", ii, ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
file.remove(paste0("CD4_cplex_exp", ii, ".txt"))
file.remove(paste0("nodesAttributes_", ii, ".txt"))
groupNodes(sif = sif1, nodesAttributes = nodesAttributes, sifName = paste0("../../Results/PHONEMeS/CD4/cplex_grouped_", ii, ".txt"),
attribName = paste0("../../Results/PHONEMeS/CD4/attributes_grouped_cplex_", ii, ".txt"))
}
sif1 = read_delim(paste0("cplex_exp_combined.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
nodesAttributes = read_delim(paste0("nodesAttributes_combined.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
groupNodes(sif = sif1, nodesAttributes = nodesAttributes, sifName = paste0("../../Results/PHONEMeS/CD4/cplex_grouped_combined.txt"),
attribName = paste0("../../Results/PHONEMeS/CD4/attributes_grouped_cplex_combined.txt"))
