require(org.Hs.eg.db)
library(UniProt.ws)
library(ggplot2)
library(ggpubr)
# up <- UniProt.ws(taxId = 9606) #human UniprotDB
# up_xref <- UniProt.ws::select(up, keys = map$uniprot , columns = c("GENES"), keytype = "UNIPROTKB") #Map
# up_xref <- up_xref %>% separate(GENES, into=c("GeneSymbol", "AltGeneSymbols"), sep=" ", remove=FALSE, extra="merge", fill="right") #Keep only first Gene
# map$gene<-up_xref$GeneSymbol
test<-getGmt("c2.cp.kegg.v6.2.symbols.gmt",
collectionType=BroadCollection(category="c2"),
geneIdType=SymbolIdentifier())
# test<-getGmt("c2.all.v6.2.symbols.gmt",
#              collectionType=BroadCollection(category="c2"),
#              geneIdType=SymbolIdentifier())
map<-read.csv2("allnodes_uniprot.csv", header = T)
universe<-map$gene
leggmap<-read.delim("keggid_map.txt", header = F, sep = "\t")%>%separate(V3, into=c('cond','text'),sep = ";")
keggmap<-read.csv2("kegg.csv")
colnames(keggmap)<-c('path', 'annot')
folder<-'results_dorothea'
resultsname<-'_doro_'
cases = c('EGF','TNFA','TGFA','IFNG','insulin','SHH','CNTF','IL11','IL4','NTF3','FGF8','PDGFB','IGF2','HBEGF','AREG','IL1B','C12iEDAP','FSL1','flagellin','ODN2006')
beta = c(0.001,0.003,0.01,0.03,0.1,0.3,0.5,0.8,1,1.2,1.5,2)
matrixCases = list()
numPathways = c()
for(ii in 1:length(cases)){
library(readr)
omnipath = read_delim("Omnipath_signed_Uniprot_0615.txt", "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
allSpecies = unique(x = c(omnipath$X1, omnipath$X3))
input = colnames(read_delim(paste0("results_dorothea/", cases[ii], ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE))
inputG = c()
# if(ii==13){
#   inputG=c(inputG, "IGF2R")
# } else {
#   for(jj in 1:length(input)){
#     inputG = c(inputG, as.character(map$gene[which(as.character(map$uniprot)==input[jj])]))
#   }
# }
for(jj in 1:length(input)){
inputG = c(inputG, as.character(map$gene[which(as.character(map$uniprot)==input[jj])]))
}
mm = matrix(data = , nrow = length(beta)+2, ncol = 2)
rownames(mm) = c(as.character(beta), "combined", "omnipath")
colnames(mm) = c("hits", "percentage")
pathwayList = list()
pathwayList_members = c()
for(jj in 1:length(test)){
if(any(inputG%in%test[[jj]]@geneIds)){
pathwayList[[length(pathwayList)+1]] = test[[jj]]
pathwayList_members = unique(c(pathwayList_members, test[[jj]]@geneIds))
}
}
numPathways = c(numPathways, length(pathwayList))
combinedSpecies = c()
for(jj in 1:length(beta)){
if(file.exists(paste0("results_dorothea/", cases[ii], "_", beta[jj], "/weightedModel_1.txt"))){
currModel <- read_delim(paste0("results_dorothea/", cases[ii], "_", beta[jj], "/weightedModel_1.txt"),
"\t", escape_double = FALSE, trim_ws = TRUE)
currSpecies = unique(c(currModel$Node1, currModel$Node2))
for(kk in 1:length(currSpecies)){
idx = which(as.character(map$uniprot)==currSpecies[kk])
if(length(idx) > 0){
currSpecies[kk] = as.character(map$gene)[idx[1]]
}
}
combinedSpecies = unique(c(combinedSpecies, currSpecies))
mm[jj, 1] = length(intersect(x = pathwayList_members, y = currSpecies))
mm[jj, 2] = length(intersect(x = pathwayList_members, y = currSpecies))/length(currSpecies)
}
}
for(kk in 1:length(combinedSpecies)){
idx = which(as.character(map$uniprot)==combinedSpecies[kk])
if(length(idx) > 0){
combinedSpecies[kk] = as.character(map$gene)[idx[1]]
}
}
mm[13, 1] = length(intersect(x = pathwayList_members, y = combinedSpecies))
mm[13, 2] = length(intersect(x = pathwayList_members, y = combinedSpecies))/length(combinedSpecies)
for(kk in 1:length(allSpecies)){
idx = which(as.character(map$uniprot)==allSpecies[kk])
if(length(idx) > 0){
allSpecies[kk] = as.character(map$gene)[idx[1]]
}
}
mm[14, 1] = length(intersect(x = pathwayList_members, y = allSpecies))
mm[14, 2] = length(intersect(x = pathwayList_members, y = allSpecies))/length(allSpecies)
matrixCases[[length(matrixCases)+1]] = mm
}
names(matrixCases) = cases
###
# Plotting of distributions
goodCases = which(names(matrixCases)%in%c("flagellin", "EGF", "FSL1", "IL1B", "NTF3", "PDGFB", "TGFA"))
badCases = setdiff(x = 1:20, y = goodCases)
# beta = 1
df = matrix(data = , nrow = length(cases), ncol = 3)
colnames(df) = c("perc", "status", "case")
for(ii in 1:nrow(df)){
df[ii, 1] = matrixCases[[ii]][9, 2]
if(ii%in%goodCases){
df[ii, 2] = "good"
} else {
df[ii, 2] = "bad"
}
df[ii, 3] = cases[ii]
}
df = df[complete.cases(df), ]
df = as.data.frame(df)
df$perc = as.numeric(as.character(df$perc))
df$status = as.character(df$status)
df_10 = df
tt_10 = t.test(df$perc[which(df$status=="good")], df$perc[which(df$status=="bad")])
ks_10 = ks.test(x = df$perc[which(df$status=="good")], y = df$perc[which(df$status=="bad")])
normality_bad = shapiro.test(df$perc[which(df$status=="bad")])
normality_good = shapiro.test(df$perc[which(df$status=="good")])
library(effsize)
size_effect = cohen.d(df$perc[which(df$status=="good")], df$perc[which(df$status=="bad")])
df7 = df
pdf("overlap_distributions.pdf",width=8,height=6)
p7<-ggplot(df_10, aes(x=status, y=perc, line=status)) +
geom_violin(trim=FALSE) + labs(x ="Cases (good vs bad enrichment results)", y = "Proportion of coverage",
title = paste0("T-test: pVal=", round(x = tt_10$p.value, digits = 3),
"\nShapiro normality test: pVal of cases with good EA results = ", round(x = normality_good$p.value, digits = 3), ", pVal of cases with bad EA results = ", round(x = normality_bad$p.value, digits = 3), "\nSize effect: CohensD = ", round(x = size_effect$estimate, digits = 3)))
p7 = p7 + geom_point(aes(colour = case), position = "jitter", size = 4) + theme(plot.title = element_text(size=10))
p7 = p7 + theme(axis.text.x = element_text(color = "grey20", size = 8),
axis.text.y = element_text(color = "grey20", size = 8),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10)) + theme(legend.text=element_text(size=8)) + geom_boxplot(width=0.1)
p7
dev.off()
pdf("overlap_distributions_without_title.pdf",width=8,height=6)
p7<-ggplot(df_10, aes(x=status, y=perc, line=status)) +
geom_violin(trim=FALSE) + labs(x ="Cases (good vs bad enrichment results)", y = "Proportion of coverage")
p7 = p7 + geom_point(aes(colour = case), position = "jitter", size = 4) + theme(plot.title = element_text(size=10))
p7 = p7 + theme(axis.text.x = element_text(color = "grey20", size = 8),
axis.text.y = element_text(color = "grey20", size = 8),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10)) + theme(legend.text=element_text(size=8)) + geom_boxplot(width=0.1)
p7
dev.off()
View(df)
pdf("overlap_distributions.pdf",width=8,height=6)
p7<-ggplot(df_10, aes(x=status, y=paste0(perc*100, "%"), line=status)) +
geom_violin(trim=FALSE) + labs(x ="Cases (good vs bad enrichment results)", y = "Percentage of coverage",
title = paste0("T-test: pVal=", round(x = tt_10$p.value, digits = 3),
"\nShapiro normality test: pVal of cases with good EA results = ", round(x = normality_good$p.value, digits = 3), ", pVal of cases with bad EA results = ", round(x = normality_bad$p.value, digits = 3), "\nSize effect: CohensD = ", round(x = size_effect$estimate, digits = 3)))
p7 = p7 + geom_point(aes(colour = case), position = "jitter", size = 4) + theme(plot.title = element_text(size=10))
p7 = p7 + theme(axis.text.x = element_text(color = "grey20", size = 8),
axis.text.y = element_text(color = "grey20", size = 8),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10)) + theme(legend.text=element_text(size=8)) + geom_boxplot(width=0.1)
p7
dev.off()
pdf("overlap_distributions_without_title.pdf",width=8,height=6)
p7<-ggplot(df_10, aes(x=status, y=paste0(perc*100, "%"), line=status)) +
geom_violin(trim=FALSE) + labs(x ="Cases (good vs bad enrichment results)", y = "Percentage of coverage")
p7 = p7 + geom_point(aes(colour = case), position = "jitter", size = 4) + theme(plot.title = element_text(size=10))
p7 = p7 + theme(axis.text.x = element_text(color = "grey20", size = 8),
axis.text.y = element_text(color = "grey20", size = 8),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10)) + theme(legend.text=element_text(size=8)) + geom_boxplot(width=0.1)
p7
dev.off()
pdf("overlap_distributions.pdf",width=8,height=6)
p7<-ggplot(df_10, aes(x=status, y=perc, line=status)) +
geom_violin(trim=FALSE) + labs(x ="Cases (good vs bad enrichment results)", y = "Proportion of coverage",
title = paste0("T-test: pVal=", round(x = tt_10$p.value, digits = 3),
"\nShapiro normality test: pVal of cases with good EA results = ", round(x = normality_good$p.value, digits = 3), ", pVal of cases with bad EA results = ", round(x = normality_bad$p.value, digits = 3), "\nSize effect: CohensD = ", round(x = size_effect$estimate, digits = 3)))
p7 = p7 + geom_point(aes(colour = case), position = "jitter", size = 4) + theme(plot.title = element_text(size=10))
p7 = p7 + theme(axis.text.x = element_text(color = "grey20", size = 8),
axis.text.y = element_text(color = "grey20", size = 8),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10)) + theme(legend.text=element_text(size=8)) + geom_boxplot(width=0.1)
p7
dev.off()
pdf("overlap_distributions_without_title.pdf",width=8,height=6)
p7<-ggplot(df_10, aes(x=status, y=perc, line=status)) +
geom_violin(trim=FALSE) + labs(x ="Cases (good vs bad enrichment results)", y = "Proportion of coverage")
p7 = p7 + geom_point(aes(colour = case), position = "jitter", size = 4) + theme(plot.title = element_text(size=10))
p7 = p7 + theme(axis.text.x = element_text(color = "grey20", size = 8),
axis.text.y = element_text(color = "grey20", size = 8),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10)) + theme(legend.text=element_text(size=8)) + geom_boxplot(width=0.1)
p7
dev.off()
rm(list = ls())
setwd("~/Documents/GitHub/Prostaglandin_Project/PHONEMeS-Analysis/CD4/")
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../Public/buildDataMatrix.R")
source("../Public/ilpFunctions.R")
source("../Public/buildDataObject.R")
source("../Public/build_Nw.R")
source("../Public/build_PKN.R")
load(file = "../../Background-Network/allD.RData")
load(file = "../../PHONEMeS-Inputs/dataGMM_CD4.RData")
GMM.ID$S.cc <- GMM.ID$dataID
GMM.res.noFC <- GMM
GMM.res <- GMM.wFC
GMM.res.ID <- GMM.ID
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list()
for(i in 1:nrow(GMM[[1]])){
conditions[[length(conditions)+1]] <- rownames(GMM[[1]])[i]
}
names(conditions) <- rownames(GMM[[i]])
targets.P<-list(cond1=c("PTGER1"), cond2=c("PTGER2"), cond3=c("PTGER3"), cond4=c("PTGER4"),
cond5=c("PTGER1", "PTGER2", "PTGER3", "PTGER4"))
targets <- targets.P
sifAll <- matrix(data = , nrow = 1, ncol = 3)
colnames(sifAll) <- c("Source", "f50", "Target")
for(ii in 1:6){
if(ii %in% 1:5){
experiments=ii
source("../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "all", timelimit = 3600, case = ii)
resultsMulti <- removeRedundantNodes(resultsSIF1 = resultsMulti)
write.table(x = resultsMulti, file = paste0("CD4_cplex_exp", ii, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
sifAll <- unique(rbind(sifAll, as.matrix(resultsMulti)))
#Assigning attributes for better visualization
source("../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = sifAll[-1, ], dataGMM = dataGMM, targets = targets.P)
write.table(x = nodesAttributes, file = paste0("nodesAttributes_", ii, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
} else {
experiments=1:5
source("../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "all", timelimit = 3600, case = 5)
resultsMulti <- removeRedundantNodes(resultsSIF1 = resultsMulti)
write.table(x = resultsMulti, file = paste0("cplex_exp_combined.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
sifAll <- unique(rbind(sifAll, as.matrix(resultsMulti)))
#Assigning attributes for better visualization
source("../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = sifAll[-1, ], dataGMM = dataGMM, targets = targets.P)
write.table(x = nodesAttributes, file = paste0("nodesAttributes_combined.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
}
}
##
# Function to group the nodes
groupNodes = function(sif = sif, nodesAttributes = nodesAttributes, sifName = "sif_grouped.txt", attribName = "attrib_grouped.txt"){
idx = c()
for(ii in 1:nrow(nodesAttributes)){
if(is.na(nodesAttributes[ii, 2])){
if(length(strsplit(x = as.character(nodesAttributes[ii, 1]), split = "_")[[1]]) > 1){
idx = c(idx, ii)
}
}
}
species = nodesAttributes$Species[idx]
speciesProt = c()
residues = c()
mapping = matrix(data = , nrow = length(species), ncol = 2)
mapping[, 1] = species
for(ii in 1:length(species)){
speciesProt = c(speciesProt, strsplit(x = species[ii], split = "_")[[1]][1])
residues = c(residues, strsplit(x = species[ii], split = "_")[[1]][2])
}
uSpeciesProt = unique(speciesProt)
sites = matrix(data = , nrow = length(uSpeciesProt), ncol = 2)
sites[, 1] = uSpeciesProt
for(ii in 1:nrow(sites)){
idx = which(speciesProt==sites[ii, 1])
sites[ii, 2] = paste0(sites[ii, 1], "_")
for(jj in 1:length(idx)){
sites[ii, 2] = paste0(sites[ii, 2], residues[idx[jj]], ";")
}
sites[ii, 2] = substr(sites[ii, 2], 1, nchar(sites[ii, 2])-1)
mapping[idx, 2] = sites[ii, 2]
}
for(ii in 1:nrow(nodesAttributes)){
if(as.character(nodesAttributes[ii, 1])%in%mapping[, 1]){
idx = which(mapping[, 1]==as.character(nodesAttributes[ii, 1]))
nodesAttributes[ii, 1] = mapping[idx, 2]
}
}
nodesAttributes = unique(nodesAttributes)
write.table(x = nodesAttributes, file = attribName, quote = FALSE, sep = "\t", row.names = FALSE)
#
for(ii in 1:nrow(sif)){
idx = which(mapping[, 1]==as.character(sif[ii, 1]))
if(length(idx)>0){
sif[ii, 1] = mapping[idx, 2]
}
idx = which(mapping[, 1]==as.character(sif[ii, 3]))
if(length(idx)>0){
sif[ii, 3] = mapping[idx, 2]
}
}
for(ii in 1:nrow(sif)){
ss = as.character(sif[ii, 1])
tt = as.character(sif[ii, 3])
idx1 = which(sif$Source==ss)
idx2 = which(sif$Target==tt)
idx = intersect(x = idx1, y = idx2)
sif$Weight[idx] = as.character(mean(as.numeric(sif$Weight[idx])))
}
sif = unique(sif)
idx2rem = c()
for(ii in 1:nrow(sif)){
if(length(strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]])>1){
ss1 = strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]][1]
ss2 = strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]][2]
if(ss1==ss2){idx2rem=c(idx2rem, ii)}
}
if(length(strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]])>1){
ss1 = strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]][1]
ss2 = strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]][2]
if(ss1==ss2){idx2rem=c(idx2rem, ii)}
}
}
write.table(x = sif, file = sifName, quote = FALSE, sep = "\t", row.names = FALSE)
}
##
# grouping nodes and saving resulting networks
library(readr)
for(ii in 1:6){
if(ii%in%1:5){
sif1 = read_delim(paste0("CD4_cplex_exp", ii, ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
nodesAttributes = read_delim(paste0("nodesAttributes_", ii, ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
file.remove(paste0("CD4_cplex_exp", ii, ".txt"))
file.remove(paste0("nodesAttributes_", ii, ".txt"))
groupNodes(sif = sif1, nodesAttributes = nodesAttributes, sifName = paste0("../../Results/PHONEMeS/CD4/cplex_grouped_", ii, ".txt"),
attribName = paste0("../../Results/PHONEMeS/CD4/attributes_grouped_cplex_", ii, ".txt"))
} else {
sif1 = read_delim("cplex_exp_combined.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
nodesAttributes = read_delim("nodesAttributes_combined.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
file.remove("cplex_exp_combined.txt")
file.remove("nodesAttributes_combined.txt")
groupNodes(sif = sif1, nodesAttributes = nodesAttributes, sifName = "../../Results/PHONEMeS/CD4/cplex_grouped_combined.txt",
attribName = "../../Results/PHONEMeS/CD4/attributes_grouped_combined.txt")
}
}
##
# removing redundant remaining files
file.remove("clone0.log")
file.remove("clone1.log")
file.remove("clone2.log")
file.remove("clone3.log")
file.remove("cplex")
rm(list = ls())
getwd()
setwd("/Users/enio.gjerga/Documents/GitHub/Prostaglandin_Project/PHONEMeS-Analysis/CD8")
file.remove("nodesAttributes.txt")
getwd()
setwd("/Users/enio.gjerga/Documents/GitHub/Prostaglandin_Project/PHONEMeS-Analysis/CD4")
file.remove("nodesAttributes.txt")
setwd("/Users/enio.gjerga/Documents/GitHub/Prostaglandin_Project/PHONEMeS-Analysis/CD8")
getwd()
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../Public/buildDataMatrix.R")
source("../Public/ilpFunctions.R")
source("../Public/buildDataObject.R")
source("../Public/build_Nw.R")
source("../Public/build_PKN.R")
load(file = "../../Background-Network/allD.RData")
load(file = "../../PHONEMeS-Inputs/dataGMM_CD8.RData")
GMM.ID$S.cc <- GMM.ID$dataID
GMM.res.noFC <- GMM
GMM.res <- GMM.wFC
GMM.res.ID <- GMM.ID
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list()
for(i in 1:nrow(GMM[[1]])){
conditions[[length(conditions)+1]] <- rownames(GMM[[1]])[i]
}
names(conditions) <- rownames(GMM[[i]])
targets.P<-list(cond1=c("PTGER1"), cond2=c("PTGER2"), cond3=c("PTGER3"), cond4=c("PTGER4"),
cond5=c("PTGER1", "PTGER2", "PTGER3", "PTGER4"))
targets <- targets.P
sifAll <- matrix(data = , nrow = 1, ncol = 3)
colnames(sifAll) <- c("Source", "f50", "Target")
for(ii in 1:6){
if(ii < 6){
experiments=ii
source("../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "all", timelimit = 600, case = ii)
resultsMulti <- removeRedundantNodes(resultsSIF1 = resultsMulti)
write.table(x = resultsMulti, file = paste0("CD8_cplex_exp", ii, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
sifAll <- unique(rbind(sifAll, as.matrix(resultsMulti)))
#Assigning attributes for better visualization
source("../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = sifAll[-1, ], dataGMM = dataGMM, targets = targets.P)
write.table(x = nodesAttributes, file = paste0("nodesAttributes_", ii, ".txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
} else {
experiments=1:5
source("../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "all", timelimit = 3600, case = 5)
resultsMulti <- removeRedundantNodes(resultsSIF1 = resultsMulti)
write.table(x = resultsMulti, file = paste0("cplex_exp_combined.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
sifAll <- unique(rbind(sifAll, as.matrix(resultsMulti)))
#Assigning attributes for better visualization
source("../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = sifAll[-1, ], dataGMM = dataGMM, targets = targets.P)
write.table(x = nodesAttributes, file = paste0("nodesAttributes_combined.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
}
}
##
# Function to group the nodes
groupNodes = function(sif = sif, nodesAttributes = nodesAttributes, sifName = "sif_grouped.txt", attribName = "attrib_grouped.txt"){
idx = c()
for(ii in 1:nrow(nodesAttributes)){
if(is.na(nodesAttributes[ii, 2])){
if(length(strsplit(x = as.character(nodesAttributes[ii, 1]), split = "_")[[1]]) > 1){
idx = c(idx, ii)
}
}
}
species = nodesAttributes$Species[idx]
speciesProt = c()
residues = c()
mapping = matrix(data = , nrow = length(species), ncol = 2)
mapping[, 1] = species
for(ii in 1:length(species)){
speciesProt = c(speciesProt, strsplit(x = species[ii], split = "_")[[1]][1])
residues = c(residues, strsplit(x = species[ii], split = "_")[[1]][2])
}
uSpeciesProt = unique(speciesProt)
sites = matrix(data = , nrow = length(uSpeciesProt), ncol = 2)
sites[, 1] = uSpeciesProt
for(ii in 1:nrow(sites)){
idx = which(speciesProt==sites[ii, 1])
sites[ii, 2] = paste0(sites[ii, 1], "_")
for(jj in 1:length(idx)){
sites[ii, 2] = paste0(sites[ii, 2], residues[idx[jj]], ";")
}
sites[ii, 2] = substr(sites[ii, 2], 1, nchar(sites[ii, 2])-1)
mapping[idx, 2] = sites[ii, 2]
}
for(ii in 1:nrow(nodesAttributes)){
if(as.character(nodesAttributes[ii, 1])%in%mapping[, 1]){
idx = which(mapping[, 1]==as.character(nodesAttributes[ii, 1]))
nodesAttributes[ii, 1] = mapping[idx, 2]
}
}
nodesAttributes = unique(nodesAttributes)
write.table(x = nodesAttributes, file = attribName, quote = FALSE, sep = "\t", row.names = FALSE)
#
for(ii in 1:nrow(sif)){
idx = which(mapping[, 1]==as.character(sif[ii, 1]))
if(length(idx)>0){
sif[ii, 1] = mapping[idx, 2]
}
idx = which(mapping[, 1]==as.character(sif[ii, 3]))
if(length(idx)>0){
sif[ii, 3] = mapping[idx, 2]
}
}
for(ii in 1:nrow(sif)){
ss = as.character(sif[ii, 1])
tt = as.character(sif[ii, 3])
idx1 = which(sif$Source==ss)
idx2 = which(sif$Target==tt)
idx = intersect(x = idx1, y = idx2)
sif$Weight[idx] = as.character(mean(as.numeric(sif$Weight[idx])))
}
sif = unique(sif)
idx2rem = c()
for(ii in 1:nrow(sif)){
if(length(strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]])>1){
ss1 = strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]][1]
ss2 = strsplit(x = as.character(sif[ii, 1]), split = "_")[[1]][2]
if(ss1==ss2){idx2rem=c(idx2rem, ii)}
}
if(length(strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]])>1){
ss1 = strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]][1]
ss2 = strsplit(x = as.character(sif[ii, 3]), split = "_")[[1]][2]
if(ss1==ss2){idx2rem=c(idx2rem, ii)}
}
}
write.table(x = sif, file = sifName, quote = FALSE, sep = "\t", row.names = FALSE)
}
##
# grouping nodes and saving resulting networks
library(readr)
for(ii in 1:6){
if(ii%in%1:5){
sif1 = read_delim(paste0("CD8_cplex_exp", ii, ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
nodesAttributes = read_delim(paste0("nodesAttributes_", ii, ".txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
file.remove(paste0("CD8_cplex_exp", ii, ".txt"))
file.remove(paste0("nodesAttributes_", ii, ".txt"))
groupNodes(sif = sif1, nodesAttributes = nodesAttributes, sifName = paste0("../../Results/PHONEMeS/CD8/cplex_grouped_", ii, ".txt"),
attribName = paste0("../../Results/PHONEMeS/CD8/attributes_grouped_cplex_", ii, ".txt"))
} else {
sif1 = read_delim("cplex_exp_combined.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
nodesAttributes = read_delim("nodesAttributes_combined.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
file.remove("cplex_exp_combined.txt")
file.remove("nodesAttributes_combined.txt")
groupNodes(sif = sif1, nodesAttributes = nodesAttributes, sifName = "../../Results/PHONEMeS/CD8/cplex_grouped_combined.txt",
attribName = "../../Results/PHONEMeS/CD8/attributes_grouped_combined.txt")
}
}
##
# removing redundant remaining files
file.remove("clone0.log")
file.remove("clone1.log")
file.remove("clone2.log")
file.remove("clone3.log")
file.remove("cplex")
file.remove("nodesAttributes.txt")
